/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
	ethers,
	EventFilter,
	Signer,
	BigNumber,
	BigNumberish,
	PopulatedTransaction,
	BaseContract,
	ContractTransaction,
	Overrides,
	CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ResourceManagerInterface extends ethers.utils.Interface {
	functions: {
		"accountLength()": FunctionFragment;
		"balanceAt(uint256)": FunctionFragment;
		"cidAt(bytes32,uint256)": FunctionFragment;
		"cidExists(bytes32,bytes)": FunctionFragment;
		"cidKey(bytes)": FunctionFragment;
		"cidLength(bytes32)": FunctionFragment;
		"cost(bytes32)": FunctionFragment;
		"expiration(bytes32)": FunctionFragment;
		"exsits(bytes32)": FunctionFragment;
		"getBalances(uint256,uint256)": FunctionFragment;
		"getCID(bytes32,bytes)": FunctionFragment;
		"getCIDs(bytes32,uint256,uint256)": FunctionFragment;
		"guid(bytes2,bytes2,bytes28)": FunctionFragment;
		"insert(bytes32,bytes,uint256)": FunctionFragment;
		"left(bytes32)": FunctionFragment;
		"owner()": FunctionFragment;
		"permit(address,bool)": FunctionFragment;
		"permitPin(address,bool)": FunctionFragment;
		"permits(address)": FunctionFragment;
		"permittedPinManagers(address)": FunctionFragment;
		"remove(bytes32,bytes)": FunctionFragment;
		"renounceOwnership()": FunctionFragment;
		"syncStorage(bytes2,bytes2,bytes28,uint256,uint256)": FunctionFragment;
		"total(bytes32)": FunctionFragment;
		"transferOwnership(address)": FunctionFragment;
		"update(bytes32,bytes,uint256)": FunctionFragment;
	};

	encodeFunctionData(
		functionFragment: "accountLength",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "balanceAt",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "cidAt",
		values: [BytesLike, BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "cidExists",
		values: [BytesLike, BytesLike]
	): string;
	encodeFunctionData(functionFragment: "cidKey", values: [BytesLike]): string;
	encodeFunctionData(
		functionFragment: "cidLength",
		values: [BytesLike]
	): string;
	encodeFunctionData(functionFragment: "cost", values: [BytesLike]): string;
	encodeFunctionData(
		functionFragment: "expiration",
		values: [BytesLike]
	): string;
	encodeFunctionData(functionFragment: "exsits", values: [BytesLike]): string;
	encodeFunctionData(
		functionFragment: "getBalances",
		values: [BigNumberish, BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "getCID",
		values: [BytesLike, BytesLike]
	): string;
	encodeFunctionData(
		functionFragment: "getCIDs",
		values: [BytesLike, BigNumberish, BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "guid",
		values: [BytesLike, BytesLike, BytesLike]
	): string;
	encodeFunctionData(
		functionFragment: "insert",
		values: [BytesLike, BytesLike, BigNumberish]
	): string;
	encodeFunctionData(functionFragment: "left", values: [BytesLike]): string;
	encodeFunctionData(functionFragment: "owner", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "permit",
		values: [string, boolean]
	): string;
	encodeFunctionData(
		functionFragment: "permitPin",
		values: [string, boolean]
	): string;
	encodeFunctionData(functionFragment: "permits", values: [string]): string;
	encodeFunctionData(
		functionFragment: "permittedPinManagers",
		values: [string]
	): string;
	encodeFunctionData(
		functionFragment: "remove",
		values: [BytesLike, BytesLike]
	): string;
	encodeFunctionData(
		functionFragment: "renounceOwnership",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "syncStorage",
		values: [BytesLike, BytesLike, BytesLike, BigNumberish, BigNumberish]
	): string;
	encodeFunctionData(functionFragment: "total", values: [BytesLike]): string;
	encodeFunctionData(
		functionFragment: "transferOwnership",
		values: [string]
	): string;
	encodeFunctionData(
		functionFragment: "update",
		values: [BytesLike, BytesLike, BigNumberish]
	): string;

	decodeFunctionResult(
		functionFragment: "accountLength",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "balanceAt", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "cidAt", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "cidExists", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "cidKey", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "cidLength", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "cost", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "expiration", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "exsits", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "getBalances",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "getCID", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getCIDs", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "guid", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "insert", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "left", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "permitPin", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "permits", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "permittedPinManagers",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "renounceOwnership",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "syncStorage",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "total", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "transferOwnership",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

	events: {
		"Insert(bytes32,bytes,uint256,uint256)": EventFragment;
		"OwnershipTransferred(address,address)": EventFragment;
		"Remove(bytes32,bytes,uint256,uint256)": EventFragment;
		"SyncStorage(bytes2,bytes2,bytes28,uint256,uint256)": EventFragment;
		"Update(bytes32,bytes,uint256,uint256,uint256)": EventFragment;
	};

	getEvent(nameOrSignatureOrTopic: "Insert"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "Remove"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "SyncStorage"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "Update"): EventFragment;
}

export class ResourceManager extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this;
	attach(addressOrName: string): this;
	deployed(): Promise<this>;

	listeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
	): Array<TypedListener<EventArgsArray, EventArgsObject>>;
	off<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	on<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	once<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
	): this;

	listeners(eventName?: string): Array<Listener>;
	off(eventName: string, listener: Listener): this;
	on(eventName: string, listener: Listener): this;
	once(eventName: string, listener: Listener): this;
	removeListener(eventName: string, listener: Listener): this;
	removeAllListeners(eventName?: string): this;

	queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
		event: TypedEventFilter<EventArgsArray, EventArgsObject>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

	interface: ResourceManagerInterface;

	functions: {
		accountLength(overrides?: CallOverrides): Promise<[BigNumber]>;

		balanceAt(
			index: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[
				[string, BigNumber, BigNumber, BigNumber] & {
					to: string;
					total: BigNumber;
					cost: BigNumber;
					expiration: BigNumber;
				}
			] & {
				balance: [string, BigNumber, BigNumber, BigNumber] & {
					to: string;
					total: BigNumber;
					cost: BigNumber;
					expiration: BigNumber;
				};
			}
		>;

		cidAt(
			to: BytesLike,
			index: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[[BigNumber, string] & { size: BigNumber; data: string }] & {
				cid: [BigNumber, string] & { size: BigNumber; data: string };
			}
		>;

		cidExists(
			to: BytesLike,
			cid: BytesLike,
			overrides?: CallOverrides
		): Promise<[boolean]>;

		cidKey(cid: BytesLike, overrides?: CallOverrides): Promise<[string]>;

		cidLength(to: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

		cost(to: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

		expiration(to: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

		exsits(to: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

		getBalances(
			offset: BigNumberish,
			limit: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[
				([string, BigNumber, BigNumber, BigNumber] & {
					to: string;
					total: BigNumber;
					cost: BigNumber;
					expiration: BigNumber;
				})[]
			] & {
				balances_: ([string, BigNumber, BigNumber, BigNumber] & {
					to: string;
					total: BigNumber;
					cost: BigNumber;
					expiration: BigNumber;
				})[];
			}
		>;

		getCID(
			to: BytesLike,
			cid: BytesLike,
			overrides?: CallOverrides
		): Promise<[[BigNumber, string] & { size: BigNumber; data: string }]>;

		getCIDs(
			to: BytesLike,
			offset: BigNumberish,
			limit: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[([BigNumber, string] & { size: BigNumber; data: string })[]] & {
				cids: ([BigNumber, string] & { size: BigNumber; data: string })[];
			}
		>;

		guid(
			gId: BytesLike,
			serviceId: BytesLike,
			uuid: BytesLike,
			overrides?: CallOverrides
		): Promise<[string]>;

		insert(
			to: BytesLike,
			cid: BytesLike,
			size: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		left(to: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

		owner(overrides?: CallOverrides): Promise<[string]>;

		permit(
			permitter: string,
			isPermit: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		permitPin(
			pinManager: string,
			isPermit: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		permits(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

		permittedPinManagers(
			arg0: string,
			overrides?: CallOverrides
		): Promise<[boolean]>;

		remove(
			to: BytesLike,
			cid: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		renounceOwnership(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		syncStorage(
			gId: BytesLike,
			serviceId: BytesLike,
			uuid: BytesLike,
			amount: BigNumberish,
			expiration_: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		total(to: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		update(
			to: BytesLike,
			cid: BytesLike,
			size: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;
	};

	accountLength(overrides?: CallOverrides): Promise<BigNumber>;

	balanceAt(
		index: BigNumberish,
		overrides?: CallOverrides
	): Promise<
		[string, BigNumber, BigNumber, BigNumber] & {
			to: string;
			total: BigNumber;
			cost: BigNumber;
			expiration: BigNumber;
		}
	>;

	cidAt(
		to: BytesLike,
		index: BigNumberish,
		overrides?: CallOverrides
	): Promise<[BigNumber, string] & { size: BigNumber; data: string }>;

	cidExists(
		to: BytesLike,
		cid: BytesLike,
		overrides?: CallOverrides
	): Promise<boolean>;

	cidKey(cid: BytesLike, overrides?: CallOverrides): Promise<string>;

	cidLength(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

	cost(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

	expiration(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

	exsits(to: BytesLike, overrides?: CallOverrides): Promise<boolean>;

	getBalances(
		offset: BigNumberish,
		limit: BigNumberish,
		overrides?: CallOverrides
	): Promise<
		([string, BigNumber, BigNumber, BigNumber] & {
			to: string;
			total: BigNumber;
			cost: BigNumber;
			expiration: BigNumber;
		})[]
	>;

	getCID(
		to: BytesLike,
		cid: BytesLike,
		overrides?: CallOverrides
	): Promise<[BigNumber, string] & { size: BigNumber; data: string }>;

	getCIDs(
		to: BytesLike,
		offset: BigNumberish,
		limit: BigNumberish,
		overrides?: CallOverrides
	): Promise<([BigNumber, string] & { size: BigNumber; data: string })[]>;

	guid(
		gId: BytesLike,
		serviceId: BytesLike,
		uuid: BytesLike,
		overrides?: CallOverrides
	): Promise<string>;

	insert(
		to: BytesLike,
		cid: BytesLike,
		size: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	left(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

	owner(overrides?: CallOverrides): Promise<string>;

	permit(
		permitter: string,
		isPermit: boolean,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	permitPin(
		pinManager: string,
		isPermit: boolean,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	permits(arg0: string, overrides?: CallOverrides): Promise<boolean>;

	permittedPinManagers(
		arg0: string,
		overrides?: CallOverrides
	): Promise<boolean>;

	remove(
		to: BytesLike,
		cid: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	renounceOwnership(
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	syncStorage(
		gId: BytesLike,
		serviceId: BytesLike,
		uuid: BytesLike,
		amount: BigNumberish,
		expiration_: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	total(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

	transferOwnership(
		newOwner: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	update(
		to: BytesLike,
		cid: BytesLike,
		size: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	callStatic: {
		accountLength(overrides?: CallOverrides): Promise<BigNumber>;

		balanceAt(
			index: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[string, BigNumber, BigNumber, BigNumber] & {
				to: string;
				total: BigNumber;
				cost: BigNumber;
				expiration: BigNumber;
			}
		>;

		cidAt(
			to: BytesLike,
			index: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber, string] & { size: BigNumber; data: string }>;

		cidExists(
			to: BytesLike,
			cid: BytesLike,
			overrides?: CallOverrides
		): Promise<boolean>;

		cidKey(cid: BytesLike, overrides?: CallOverrides): Promise<string>;

		cidLength(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		cost(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		expiration(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		exsits(to: BytesLike, overrides?: CallOverrides): Promise<boolean>;

		getBalances(
			offset: BigNumberish,
			limit: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			([string, BigNumber, BigNumber, BigNumber] & {
				to: string;
				total: BigNumber;
				cost: BigNumber;
				expiration: BigNumber;
			})[]
		>;

		getCID(
			to: BytesLike,
			cid: BytesLike,
			overrides?: CallOverrides
		): Promise<[BigNumber, string] & { size: BigNumber; data: string }>;

		getCIDs(
			to: BytesLike,
			offset: BigNumberish,
			limit: BigNumberish,
			overrides?: CallOverrides
		): Promise<([BigNumber, string] & { size: BigNumber; data: string })[]>;

		guid(
			gId: BytesLike,
			serviceId: BytesLike,
			uuid: BytesLike,
			overrides?: CallOverrides
		): Promise<string>;

		insert(
			to: BytesLike,
			cid: BytesLike,
			size: BigNumberish,
			overrides?: CallOverrides
		): Promise<void>;

		left(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		owner(overrides?: CallOverrides): Promise<string>;

		permit(
			permitter: string,
			isPermit: boolean,
			overrides?: CallOverrides
		): Promise<void>;

		permitPin(
			pinManager: string,
			isPermit: boolean,
			overrides?: CallOverrides
		): Promise<void>;

		permits(arg0: string, overrides?: CallOverrides): Promise<boolean>;

		permittedPinManagers(
			arg0: string,
			overrides?: CallOverrides
		): Promise<boolean>;

		remove(
			to: BytesLike,
			cid: BytesLike,
			overrides?: CallOverrides
		): Promise<void>;

		renounceOwnership(overrides?: CallOverrides): Promise<void>;

		syncStorage(
			gId: BytesLike,
			serviceId: BytesLike,
			uuid: BytesLike,
			amount: BigNumberish,
			expiration_: BigNumberish,
			overrides?: CallOverrides
		): Promise<void>;

		total(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		transferOwnership(
			newOwner: string,
			overrides?: CallOverrides
		): Promise<void>;

		update(
			to: BytesLike,
			cid: BytesLike,
			size: BigNumberish,
			overrides?: CallOverrides
		): Promise<void>;
	};

	filters: {
		Insert(
			to?: BytesLike | null,
			cid?: null,
			size?: null,
			expiration?: null
		): TypedEventFilter<
			[string, string, BigNumber, BigNumber],
			{ to: string; cid: string; size: BigNumber; expiration: BigNumber }
		>;

		OwnershipTransferred(
			previousOwner?: string | null,
			newOwner?: string | null
		): TypedEventFilter<
			[string, string],
			{ previousOwner: string; newOwner: string }
		>;

		Remove(
			to?: BytesLike | null,
			cid?: null,
			size?: null,
			expiration?: null
		): TypedEventFilter<
			[string, string, BigNumber, BigNumber],
			{ to: string; cid: string; size: BigNumber; expiration: BigNumber }
		>;

		SyncStorage(
			gId?: BytesLike | null,
			serviceId?: BytesLike | null,
			uuid?: BytesLike | null,
			amount?: null,
			expiration?: null
		): TypedEventFilter<
			[string, string, string, BigNumber, BigNumber],
			{
				gId: string;
				serviceId: string;
				uuid: string;
				amount: BigNumber;
				expiration: BigNumber;
			}
		>;

		Update(
			to?: BytesLike | null,
			cid?: null,
			originalSize?: null,
			size?: null,
			expiration?: null
		): TypedEventFilter<
			[string, string, BigNumber, BigNumber, BigNumber],
			{
				to: string;
				cid: string;
				originalSize: BigNumber;
				size: BigNumber;
				expiration: BigNumber;
			}
		>;
	};

	estimateGas: {
		accountLength(overrides?: CallOverrides): Promise<BigNumber>;

		balanceAt(
			index: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		cidAt(
			to: BytesLike,
			index: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		cidExists(
			to: BytesLike,
			cid: BytesLike,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		cidKey(cid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		cidLength(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		cost(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		expiration(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		exsits(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		getBalances(
			offset: BigNumberish,
			limit: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		getCID(
			to: BytesLike,
			cid: BytesLike,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		getCIDs(
			to: BytesLike,
			offset: BigNumberish,
			limit: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		guid(
			gId: BytesLike,
			serviceId: BytesLike,
			uuid: BytesLike,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		insert(
			to: BytesLike,
			cid: BytesLike,
			size: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		left(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		owner(overrides?: CallOverrides): Promise<BigNumber>;

		permit(
			permitter: string,
			isPermit: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		permitPin(
			pinManager: string,
			isPermit: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		permits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

		permittedPinManagers(
			arg0: string,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		remove(
			to: BytesLike,
			cid: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		renounceOwnership(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		syncStorage(
			gId: BytesLike,
			serviceId: BytesLike,
			uuid: BytesLike,
			amount: BigNumberish,
			expiration_: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		total(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		update(
			to: BytesLike,
			cid: BytesLike,
			size: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;
	};

	populateTransaction: {
		accountLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		balanceAt(
			index: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		cidAt(
			to: BytesLike,
			index: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		cidExists(
			to: BytesLike,
			cid: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		cidKey(
			cid: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		cidLength(
			to: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		cost(
			to: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		expiration(
			to: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		exsits(
			to: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		getBalances(
			offset: BigNumberish,
			limit: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		getCID(
			to: BytesLike,
			cid: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		getCIDs(
			to: BytesLike,
			offset: BigNumberish,
			limit: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		guid(
			gId: BytesLike,
			serviceId: BytesLike,
			uuid: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		insert(
			to: BytesLike,
			cid: BytesLike,
			size: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		left(
			to: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		permit(
			permitter: string,
			isPermit: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		permitPin(
			pinManager: string,
			isPermit: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		permits(
			arg0: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		permittedPinManagers(
			arg0: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		remove(
			to: BytesLike,
			cid: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		renounceOwnership(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		syncStorage(
			gId: BytesLike,
			serviceId: BytesLike,
			uuid: BytesLike,
			amount: BigNumberish,
			expiration_: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		total(
			to: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		update(
			to: BytesLike,
			cid: BytesLike,
			size: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;
	};
}
